# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
   terraformVersion: 0.14.4
   timeoutInMinutes: 60
   agentPool: 'ubuntu-18.04'
   service_connection: 'DTS-CFTPTL-INTSVC'
   storage_account_rg: 'core-infra-intsvc-rg'
   storage_account_name: 'cftptlintsvc'
   component: 'offboarding'
   build: $(Build.BuildNumber)
   action:

stages:
   - stage: Pipeline

     jobs:

       - job: Pipeline
         timeoutInMinutes: ${{ variables.timeoutInMinutes }}
         pool:
           vmImage: ${{ variables.agentPool }}

         steps:

          - task: TerraformInstaller@0
            displayName: Terraform install
            inputs:
              terraformVersion: ${{ variables.terraformVersion }}

          - task: AzureKeyVault@1
            displayName: 'Get azure devops API token from Keyvault'
            inputs:
              runAsPreJob: false
              ConnectedServiceName: 'DCD-CFT-Sandbox'
              keyVaultName: 'infra-vault-sandbox'
              secretsFilter: 'azure-devops-token'

          - task: Bash@3
            displayName: Prevent parallel run
            env:
              thisbuild: $(Build.BuildId)
              pipelinedefinition: $(System.DefinitionId)
              azuredevopstoken: $(azure-devops-token)
            inputs:
              filePath: $(System.DefaultWorkingDirectory)/pipeline-scripts/builds-check.sh

          - task: AzureCLI@2
            displayName: 'Unlock TF state if required'
            condition: always()
            inputs:
              scriptType: bash
              scriptLocation: scriptPath
              azureSubscription: DTS-CFTPTL-INTSVC
              scriptPath: $(System.DefaultWorkingDirectory)/pipeline-scripts/unlock-tf-state.sh
              arguments: ${{ variables.component }} ${{ variables.storage_account_name }}

          - task: TerraformCLI@0
            displayName: Init - ${{ variables.component }}
            inputs:
              command: 'init'
              backendType: 'azurerm'
              backendServiceArm: '${{ variables.service_connection }}'
              backendAzureRmResourceGroupName: '${{ variables.storage_account_rg }}'
              backendAzureRmStorageAccountName: '${{ variables.storage_account_name }}'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: '${{ variables.component }}.tfstate'
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform

          - task: TerraformCLI@0
            displayName: Terraform validate
            inputs:
              command: 'validate'
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform

          - task: TerraformCLI@0
            displayName: Plan - ${{ variables.component }}
            inputs:
              command: 'plan'
              commandOptions: '-out=tfplan'
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              environmentServiceName: '${{ variables.service_connection }}'
              publishPlanResults: $(System.StageDisplayName)

          - task: AzureCLI@2
            displayName: Set Az credentials as variables
            inputs:
              azureSubscription: '${{ variables.service_connection }}'
              scriptType: bash
              scriptLocation: inlineScript
              addSpnToEnvironment: true
              inlineScript: |
                #!/bin/bash
                set -e
                echo "##vso[task.setvariable variable=ServicePrincipalId;]$servicePrincipalId"
                echo "##vso[task.setvariable variable=ServicePrincipalKey;]$servicePrincipalKey"
                echo "##vso[task.setvariable variable=TenantId;]$tenantId"

          - task: TerraformCLI@0
            displayName: Apply - ${{ variables.component }}
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              commandOptions: tfplan
              command: apply
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              environmentServiceName: '${{ variables.service_connection }}'
            env:
              tenantId : $(TenantId)
              clientId : $(ServicePrincipalId)
              secret : $(ServicePrincipalKey)